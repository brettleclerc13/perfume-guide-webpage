import { useEffect, useRef, useState } from 'react';	
import './Cards.css';

const Cards = (img_data) => {
	const { name, src, alt, onClick } = img_data;
	const [isVisible, setIsVisible] = useState(false);
	const cardRef = useRef(null);

	useEffect(() => {
		const currentCard = cardRef.current;
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if(entry.isIntersecting) {
						setIsVisible(true);
						setTimeout(() => setIsVisible(false), 5000);
					}
				});
			},
			{
				threshold: 0.3,
			}
		);
		if (currentCard) {
			observer.observe(currentCard);
		}
		return () => {
			if (currentCard) {
				observer.unobserve(currentCard);
			}
		};
	}, []);

	return (
			<div
				className={`card ${isVisible ? 'show-play-icon' : ''}`}
				ref={cardRef}
				onClick={onClick}
			>
			<img
				name={name}
				className="card-img"
				onClick={onClick}
				src={`./Elements/Collections/${src}`}
				alt={alt}
				draggable="false"
			/>
			<div className="card-overlay"></div>
			<span className="card-text-container">
				<div className="empty-space"></div>
				<h3 className="card-text">
					{name.replace('_', ' ')}
				</h3>
			</span>
			{isVisible && (
				<div className="play-icon">
					<img
						src="./Elements/Layout/play_button.svg"
						alt="Play Icon"
						width="40"
						height="40"
					/>
				</div>
			)}
		</div>
	);
};

export default Cards;

.card {
	position: relative;
	width: 7.5rem;
	height: 10.5rem;
	flex: 0 0 auto;
	background-color: white;
	scroll-snap-align: start;
	transition : all 0.3s;
}

.card-img {
	width: 100%;
	height: 100%;
	object-fit: cover;
	object-position: center;
}

@media screen and (min-width: 1000px) {
	.card:hover {
	transform: translateY(-2px);
	}
	.card:active {
		opacity: 0.8;
	}
}

@media screen and (max-width: 1000px) {
	.card:active {
		opacity: 0.8;
	}
}

.card-overlay {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: 
	linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, rgb(20, 16, 16, 0.8) 100%);
	display: flex;
	flex-direction: column;
	align-items: flex-start;
	justify-content: center;
	cursor: pointer;
  }

.card-text-container {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

.card-text-container .empty-space {
	height: 75%;
  }

  .card-text-container .card-text {
	text-align: center;
	color: white;
	padding: 0 1rem 0;
  }

.play-icon {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	opacity: 0;
	visibility: hidden;
	transition: opacity 0.5s, visibility 0.5s;
}

.card.show-play-icon .play-icon {
	animation: fadeInOut 5s forwards;
	opacity: 1;
	visibility: visible;
}

@keyframes fadeInOut {
	0% { opacity: 0; }
	50% { opacity: 1; }
	100% { opacity: 0; }
}
